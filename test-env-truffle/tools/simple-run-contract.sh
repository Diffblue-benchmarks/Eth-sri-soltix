#!/bin/sh


# This script performs a (currently truffle/ganache-cli-based) execution of a
# contract, and produces program measurement results.
#
# It expects a truffle project directory argument, will execute the contract with
# the given test.js file, and stores results in the "results" sub directoy
#
# TODO 1
# - This should also support aleth instead of ganache-cli (main motivating factor
# to get started on this script), but truffle/aleth do not appear to play well.
# To get started 
#
#  - run aleth:
#     ./build/aleth/aleth  --test --private privateChain --config genesis.json --db-path blockchain --no-discovery -m on --network-id 16
#     ... with a genesis.json containing  "allowFutureBlocks" : true
#  - run jsonrpcproxy.py to redirect the RPC FIFO to TCP socket 8545? see lsof -i
#  - run truffle test with correct RPC port in truffle.js
# TODO 2
# This is probably currently missing some components from run-one-test.sh, such
# as support code injections from the mutator. The tasks shold be separated more
# clearly e.g. as follows:
#
#     generate-contract.sh          - create base contract files
#     run-single-contract.sh        - for each in original, possibly instrumented, mutated:
#       ... possible prepare-and-run.sh wrapper for standalone use:
#         prepare-contract-truffle.sh   - build truffle project structure
#                                         perform preparations such as support code
#                                         generate transactions if not already present
#                                         (for external contracts not generated by us)
#         simple-run-contract.sh        - assume everything is in place and run it
#     
killall node


SETTINGS=`dirname $0`/../../settings.cfg.sh
if ! . "$SETTINGS"; then
        echo Error: Cannot load settings file $SETTINGS - please run setup.sh
        exit 1
fi



usage() {
	echo "Usage: run-contract.sh [truffle-project-dir]" 
	exit 1
}

if ! test "$#" = 1; then
	usage
fi

PROJDIR="$1"
RESULTDIR=results
#GANACHE_CLI_PATH="$PWD"/node_modules/ethereumjs-testrpc-sc/build/cli.node.js
#GANACHE_CLI_PATH="$PWD"/node_modules/ganache-cli/build/cli.node.js

BIN_DIR_NAME=`dirname $0`
GANACHE_CLI_PATH=`realpath $BIN_DIR_NAME/../node_modules/.bin/ganache-cli`
TRUFFLE_PATH=`realpath $BIN_DIR_NAME/../node_modules/.bin/truffle`
EXTERNAL_COMPILER_SCRIPT_PATH=`realpath $BIN_DIR_NAME/external-solc/external-solc-for-all.sh`


# Setup current optimization settings in truffle configuration
# Note that if an external compiler binary is used, external-solc.sh will currently pick up 
# the settings # from settings.cfg.sh itself, so this is a bit awkward
if test "$USE_SOLC_OPTIMIZATION" = yes; then 
	OPTIMIZATION_FLAG=on
	OPTIMIZATION_RUNS=$SOLC_OPTIMIZATION_RUNS
else
	OPTIMIZATION_FLAG=off
fi
"$BIN_DIR_NAME"/truffle-optimization-setting.sh $OPTIMIZATION_FLAG $OPTIMIZATION_RUNS



# Copy config file, enter project directory
# 33835 was IIRC aleth default?
#module.exports={"networks":{"test":{"port":33835,"host":"localhost","network_id":"*","gas":17592186044415,"gasPrice":1}},"compilers":{"external":{"command":"/home/nweller/solidity/build/solc/solc","targets":[]}}};

#cat > "$PROJDIR"/truffle.js <<EOF
#module.exports={"networks":{"test":{"port":33499,"host":"localhost","network_id":"*","gas":17592186044415,"gasPrice":1}},"compilers":{"external":{"command":"/home/nweller/solidity/build/solc/solc","targets":[]}}};
#EOF

if test "$GANACHE_CLI_PORT" = ""; then
	GANACHE_CLI_PORT=33499
fi

#echo 'module.exports={"networks":{"test":{"port":'$GANACHE_CLI_PORT',"host":"localhost","network_id":"*","gas":17592186044415,"gasPrice":1}},"compilers":{"external":{"command":"/home/nweller/solidity/build/solc/solc","targets":[]}}};' >"$PROJDIR"/truffle.js
echo 'module.exports={"networks":{"test":{"port":'$GANACHE_CLI_PORT',"host":"localhost","network_id":"*","gas":17592186044415,"gasPrice":1}}};' >"$PROJDIR"/truffle.js

#module.exports={"networks":{"test":{"port":33499,"host":"localhost","network_id":"*","gas":17592186044415,"gasPrice":1}},"compilers":{"external":{"command":"/home/nweller/solidity/build/solc/solc","targets":[]}}};



#module.exports={"networks":{"test":{"port":33499,"host":"localhost","network_id":"*","gas":17592186044415,"gasPrice":1}}};
if ! cd "$PROJDIR"; then
	echo Error: Cannot enter project directory $PROJDIR
	exit 1
fi

if ! test -d contracts; then
	echo "Error: Input directory $PROJDIR does not look like a truffle project - missing 'contracts' directory"
	exit 1
fi

cat >contracts/Migrations.sol <<EOF
//pragma solidity ^0.4.4;

contract Migrations {
  address public owner;
  uint public last_completed_migration;

  modifier restricted() {
    if (msg.sender == owner) _;
  }

  constructor() public {
    owner = msg.sender;
  }

  function setCompleted(uint completed) public restricted {
    last_completed_migration = completed;
  }

  function upgrade(address new_address) public restricted {
    Migrations upgraded = Migrations(new_address);
    upgraded.setCompleted(last_completed_migration);
  }
}
EOF

if ! test -d test; then
	echo "Error: Input directory does not look like a truffle project - missing 'test' directory"
	exit 1
fi
if ! test -d migrations; then
	echo "Error: Input directory does not look like a truffle project - missing 'migrations' directory"
	exit 1
fi


run_ganache_cli() {
	echo Starting RPC server on port "$GANACHE_CLI_PORT"...
# 70 Log RPC server output to /home/nweller/msc-thesis/test-env/test-env-truffle/assets/sol-contract-tester/outputs/logs/current-contract/TruffleTest.rpc.log

	# TODO path 
	"$GANACHE_CLI_PATH" --port $GANACHE_CLI_PORT --gasLimit 0xfffffffffff --accounts 35 --mnemonic "icon wrestle whale a    utumn practice select fork frost festival cigar report move" --deterministic --verbose-rpc --allowUnlimitedContractSize --network-id test >TruffleTest.rpc.log 2>&1 &
	export RPC_SERVER_PID=$!

	# Wait for availability
	while ! grep "Listening on" TruffleTest.rpc.log; do
		sleep 1
	done
	echo RPC server ready
}

run_truffle_test() {
	rm -f profiling-events.log
	
	echo Deleting old results directory...
	rm -rf "$RESULTDIR"
	mkdir "$RESULTDIR"

	echo Starting truffle test...

	# TODO: To move to truffle-external-compile, we need to prevent "truffle test" from recompiling the
	# contract. This can be accomplished with the hack of passing "--migrations_directory migrations_null"
	# and creating an empty migations_null directory.
	#
	# The migration must then be performed separately after the compilation. The components truffle and
	# ganache-cli are apparently pickier about getting to communicate in this case, and --migrate may
	# require the --reset flag.
	#
	# The following sequence appears to replace "truffle test" sucessfully:
	#
	#    Prerequisites: - Fixed network of name "test" and id "1234" in truffle.js
	#                   - Empty migrations_null directory in project directory
	#    Commands:
	#          ganache-cli --port 33499 .. --network-id 1234
	#          truffle compile
	#          truffle migrate --network test --reset
	#          truffle test ./test/test.js --network test --migrations_directory migrations_null
	# TODO 1. Implement this sequence for "truffle compile", then move to/add support for truffle-external-compile
	#
	#   https://libraries.io/npm/truffle-external-compile
	#   https://ethereum.stackexchange.com/questions/34454/run-truffle-test-without-recompile-every-time
	#   https://stackoverflow.com/questions/52920225/testing-deployed-smart-contract-on-truffle
	#
	# UPDATE: The new "truffle compile" scheme works, but truffle-external-compile still looks unusable for
	# various reasons:
	#
	#    1. Not documented properly
	#    2. Hangs when executed
	#    3. Apparently isn't included in the npm standard truffle version yet (needs to reference e.g. 
	# "external-compiler" branch)
	#
	# TODO Workaround: Reactivate fast-solc-js from master branch, create command line wrapper, use that
	# instead of truffle-external-compile
	#
	# UPDATE: This seems to work now, using tools/external-solc.
	# TODO Integrate solc 0.5.1 download
	#      Get started on 0.5.1 tests

	DUMMY_MIGRATIONS_DIR="./migrations_null"
	if test -d "$DUMMY_MIGRATIONS_DIR"; then
		rm -rf "$DUMMY_MIGRATIONS_DIR"
	fi
	mkdir "$DUMMY_MIGRATIONS_DIR" 


	if test "$USE_SOLCJS" = yes; then
		# Use truffle, which will call solcjs internally
		"$NODEDIR"/node --max-old-space-size=8192 "$TRUFFLE_PATH" compile
	else
		"$EXTERNAL_COMPILER_SCRIPT_PATH" ./contracts ./build
	fi

	"$NODEDIR"/node --max-old-space-size=8192 "$TRUFFLE_PATH" migrate --network test --reset
	"$NODEDIR"/node --max-old-space-size=8192 "$TRUFFLE_PATH" test test/test.js --network test --migrations_directory "$DUMMY_MIGRATIONS_DIR" >TruffleTest.log 2>&1
}


run_ganache_cli

run_truffle_test
RC=$?

# Save results
if test -f allFiredEvents; then  # this is only generated in some cases?!
	mv allFiredEvents "$RESULTDIR"
fi
mv profiling-events.log "$RESULTDIR"
mv TruffleTest.log "$RESULTDIR"
mv TruffleTest.rpc.log "$RESULTDIR"

echo Test run complete. Log files:
echo "      Events     - $PROJDIR/$RESULTDIR/profiling-events.log"
echo "      truffle    - $PROJDIR/$RESULTDIR/TruffleTest.log"
echo "      RPC server - $PROJDIR/$RESULTDIR/TruffleTest.rpc.log"

# Cleanup
kill $RPC_SERVER_PID

if test "$RC" = 0; then
	echo OK
else
	echo ERROR
fi

exit "$RC"
